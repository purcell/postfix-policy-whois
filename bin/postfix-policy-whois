#!/usr/bin/env ruby

WHOIS_BLACKLIST = [
  /EXPIRED - PENDING DELETE/i,
  /ADDPERIOD/i,
  /monikerprivacy/i,
  /whoisprivacyprotect\.com/i,
  /whoisguard\.com/i
]

DNS_TO_WHOIS_CHECKLIST = {
  /\.monikerdns\.net$/i => "whois.moniker.com",
  /\.name-services\.com$/i => "whois.enom.com",
  /\.joker\.com$/i => "info.whois-servers.net",
  /\.registrar-servers\.com$/i => "whois.enom.com"
}


##############################################################################
# Start-up
##############################################################################

$0='postfix-policy-whois'

DBFILE = "#{ENV['TMPDIR']}/#{$0}-cache"

require 'syslog'
$LOG = Syslog.open($0, Syslog::LOG_PID | Syslog::LOG_PERROR, Syslog::LOG_MAIL)

##############################################################################
# DNS
##############################################################################

require 'timeout'
require 'resolv'

def resolve_to_name(domain, record_type)
  begin
    record = Resolv::DNS.new.getresource(domain, record_type)
    record.name.to_s if record.respond_to?(:name)
  rescue Resolv::ResolvError
    nil
  end
end

def nameserver_for(domain)
  resolve_to_name(domain, Resolv::DNS::Resource::IN::NS) ||
    resolve_to_name(domain, Resolv::DNS::Resource::IN::ANY)
end

def tld_and_nameserver(domain)
  if ns = nameserver_for(domain)
    [domain, ns]
  else
    parent_domain = domain.scan(/\.(.*)/).flatten.first
    if parent_domain && parent_domain =~ /\./
      return tld_and_nameserver(parent_domain)
    end
  end
end

##############################################################################
# WHOIS
##############################################################################

require 'socket'

def whois_via_raw(server, domain)
  $LOG.info("Checking whois for #{domain} using #{server}")
  Timeout::timeout(5) do
    TCPSocket.open(server, 43) do |sock|
      sock.write("#{domain}\r\n")
      return sock.read
    end
  end
end

def call_with_retries(n, delay)
  remaining = n
  while remaining >= 0
    begin
      return yield
    rescue
      raise $! if remaining == 0
      $LOG.warning("Retrying (#{remaining} attempts remaining): #{$!}")
      remaining -= 1
      sleep delay * (2 ** (n - remaining))
    end
  end
end

require 'yaml/dbm'
WHOIS_CACHE = YAML::DBM::open(DBFILE, 500, DBM::WRCREAT)
at_exit { WHOIS_CACHE.close() }

def whois_via(server, domain)
  key = "#{domain}@#{server}"
  val = WHOIS_CACHE[key]
  if val
    $LOG.debug("WHOIS cache hit for #{key.inspect}, created #{val[:created]}")
  else
    $LOG.debug("WHOIS cache miss for #{key.inspect}")
    whois = call_with_retries 1, 1 do
      whois_via_raw(server, domain)
    end
    WHOIS_CACHE[key] = val = {
      :whois => whois,
      :created => Time.now
    }
  end
  val[:whois]
end


def whois(domain)
  top_level_whois_server = domain.downcase.split(".").last + ".whois-servers.net"
  response = whois_via(top_level_whois_server, domain)
  if secondary_server = response.scan(/(?:Registrant Street1:)?Whois Server:\s*(\S+)/).flatten.first
    response << whois_via(secondary_server, domain)
  end
  response
end

##############################################################################
# Domain checking logic
##############################################################################

def dodgy_whois?(domain, whois_info)
  if WHOIS_BLACKLIST.find { |pattern| pattern === whois_info }
    $LOG.info("Private registration: #{domain}")
    true
  end
end

def dodgy?(domain)
  $LOG.info("Checking domain: #{domain}")
  tld, nameserver = tld_and_nameserver(domain)
  if tld
    $LOG.info("Nameserver for #{tld} is #{nameserver}")
    _, whois_server = DNS_TO_WHOIS_CHECKLIST.find { |k, v| v if nameserver =~ k }
    if whois_server
      dodgy_whois?(tld, whois_via(whois_server, tld))
    elsif nameserver.end_with?("." + tld)
      dodgy_whois?(tld, whois(tld))
    end
  end
end

##############################################################################
# TCP server and postfix policy wiring
##############################################################################

PORT = ARGV.any? ? ARGV.first.to_i : 8787

require 'socket'
server = TCPServer.new("0.0.0.0", PORT)
$LOG.info("Listening on 0.0.0.0:#{PORT}")

def reject?(policy_input)
  sender = policy_input["sender"]
  unless sender
    $LOG.info("No sender provided")
    return false
  end

  begin
    $LOG.info("Checking sender: #{sender}")
    domain = sender.scan(/@(.*)/).flatten.first.downcase
    if dodgy?(domain)
      $LOG.notice("Rejecting mail due to registrar: #{sender}")
      return true
    end
  rescue
    $LOG.err("Error checking registrar: #{$!}")
    $LOG.debug("Backtrace: #{$!.backtrace}")
    return false
  end
end

while true
  Thread.new(server.accept) do |client|
    $LOG.debug("Got connection")
    attr = Hash.new
    while line = client.gets
      break if line == "\n"
      k, v = line.scan(/^(\w+)=(.+?)\s*$/).first
      attr[k] = v if k
    end
    client.write("action=" + (reject?(attr) ? "REJECT" : "DUNNO") + "\n")

    client.write("\n")
    client.close
  end
end

# Local Variables:
# coding: utf-8
# compile-command: "./postfix-policy-whois"
# End:
