#!/usr/bin/env ruby

$0='postfix-policy-whois'

PORT = ARGV.any? ? ARGV.first.to_i : 8787

BLACKLIST = {
  # nickrayrutter.com, sleepsiesta.com
  /\.monikerdns\.net/i => { "whois.moniker.com" => /monikerprivacy/i },
  /\.name-services\.com/i => { "whois.enom.com" => /whoisprivacyprotect\.com/i },
  # Namecheap
  /\.registrar-servers\.com/i => { "whois.namecheap.com" => /whoisguard\.com/i}
}

require 'syslog'

$LOG = Syslog.open($0, Syslog::LOG_PID | Syslog::LOG_PERROR, Syslog::LOG_MAIL)

require 'resolv'

def nameserver_for(domain)
  begin
    Resolv::DNS.new.getresource(domain, Resolv::DNS::Resource::IN::NS).name.to_s
  rescue Resolv::ResolvError
    nil
  end
end

require 'socket'
require 'timeout'

def whois(server, domain)
  Timeout::timeout(5) do
    TCPSocket.open(server, 43) do |sock|
      sock.write("#{domain}\r\n")
      return sock.read
    end
  end
end

def dodgy_dns?(domain)
  if ns = nameserver_for(domain)
    _, whois_rules = BLACKLIST.find do |nsmatcher, whois_rules|
      nsmatcher =~ ns
    end
    return [domain, ns, whois_rules] if whois_rules
  else
    parent_domain = domain.scan(/\.(.*)/).flatten.first
    if parent_domain && parent_domain =~ /\./
      return dodgy_dns?(parent_domain)
    end
  end
end

def dodgy_whois?(domain, whois_rules)
  ## TODO: throttle requests
  whois_rules.each do |server, privacymatcher|
    $LOG.info("Checking whois for #{domain} using #{server}")
    return true if privacymatcher =~ whois(server, domain)
  end
end

def dodgy?(domain)
  $LOG.info("Checking domain: #{domain}")
  parent_domain, nameserver, whois_rules = dodgy_dns?(domain)
  if parent_domain
    $LOG.info("Suspicious nameserver: #{nameserver}")
    dodgy = dodgy_whois?(parent_domain, whois_rules)
    $LOG.notice("Private registration: #{parent_domain}") if dodgy
    dodgy
  end
end

require 'socket'
server = TCPServer.new("0.0.0.0", PORT)
$LOG.info("Listening on 0.0.0.0:#{PORT}")

def reject?(policy_input)
  sender = policy_input["sender"]
  unless sender
    $LOG.info("No sender provided")
    return false
  end

  begin
    $LOG.info("Checking sender: #{sender}")
    domain = sender.scan(/@(.*)/).flatten.first.downcase
    if dodgy?(domain)
      $LOG.notice("Rejecting mail due to registrar: #{sender}")
      return true
    end
  rescue
    $LOG.err("Error checking registrar: #{$!}")
    return false
  end
end

while true
  Thread.new(server.accept) do |client|
    $LOG.debug("Got connection")
    attr = Hash.new
    while line = client.gets
      break if line == "\n"
      k, v = line.scan(/^(\w+)=(.+?)\s*$/).first
      attr[k] = v if k
    end
    client.write("action=" + (reject?(attr) ? "REJECT" : "DUNNO") + "\n")

    client.write("\n")
    client.close
  end
end
